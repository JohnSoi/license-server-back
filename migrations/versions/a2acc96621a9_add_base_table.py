"""add_base_table

Revision ID: a2acc96621a9
Revises:
Create Date: 2022-07-20 16:37:52.594092

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a2acc96621a9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('history_service',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('object_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.Text(), nullable=True),
    sa.Column('area', sa.Text(), nullable=True),
    sa.Column('text', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_history_service_area'), 'history_service', ['area'], unique=False)
    op.create_index(op.f('ix_history_service_text'), 'history_service', ['text'], unique=False)
    op.create_index(op.f('ix_history_service_type'), 'history_service', ['type'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('surname', sa.Text(), nullable=True),
    sa.Column('second_name', sa.Text(), nullable=True),
    sa.Column('photo_url', sa.Text(), nullable=True),
    sa.Column('phone', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('login', sa.Text(), nullable=True),
    sa.Column('password', sa.Text(), nullable=True),
    sa.Column('date_birthday', sa.Date(), nullable=True),
    sa.Column('last_active', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_users_login'), 'users', ['login'], unique=False)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.create_index(op.f('ix_users_surname'), 'users', ['surname'], unique=False)
    op.create_table('accruals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('sum', sa.Float(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('client_uuid', postgresql.UUID(), nullable=True),
    sa.Column('license_uuid', postgresql.UUID(), nullable=True),
    sa.Column('type_paid_uuid', postgresql.UUID(), nullable=True),
    sa.Column('create_user_id', sa.Integer(), nullable=True),
    sa.Column('update_user_id', sa.Integer(), nullable=True),
    sa.Column('delete_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['create_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['delete_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['update_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_accruals_invoice_id'), 'accruals', ['invoice_id'], unique=False)
    op.create_table('clients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('inn', sa.Text(), nullable=True),
    sa.Column('kpp', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('photo', sa.Text(), nullable=True),
    sa.Column('phone', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('license_uuid', postgresql.UUID(), nullable=True),
    sa.Column('photo_url', sa.Text(), nullable=True),
    sa.Column('create_user_id', sa.Integer(), nullable=True),
    sa.Column('update_user_id', sa.Integer(), nullable=True),
    sa.Column('delete_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['create_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['delete_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['update_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_clients_license_uuid'), 'clients', ['license_uuid'], unique=False)
    op.create_index(op.f('ix_clients_name'), 'clients', ['name'], unique=False)
    op.create_table('licenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('limitation', sa.JSON(), nullable=True),
    sa.Column('create_user_id', sa.Integer(), nullable=True),
    sa.Column('update_user_id', sa.Integer(), nullable=True),
    sa.Column('delete_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['create_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['delete_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['licenses.id'], ),
    sa.ForeignKeyConstraint(['update_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_licenses_name'), 'licenses', ['name'], unique=True)
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('group_uuid', postgresql.UUID(), nullable=True),
    sa.Column('photo_url', sa.Text(), nullable=True),
    sa.Column('create_user_id', sa.Integer(), nullable=True),
    sa.Column('update_user_id', sa.Integer(), nullable=True),
    sa.Column('delete_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['create_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['delete_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['update_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_name'), 'products', ['name'], unique=False)
    op.create_table('type_paids',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('create_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('delete_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('create_user_id', sa.Integer(), nullable=True),
    sa.Column('update_user_id', sa.Integer(), nullable=True),
    sa.Column('delete_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['create_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['delete_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['update_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_type_paids_name'), 'type_paids', ['name'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_type_paids_name'), table_name='type_paids')
    op.drop_table('type_paids')
    op.drop_index(op.f('ix_products_name'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_licenses_name'), table_name='licenses')
    op.drop_table('licenses')
    op.drop_index(op.f('ix_clients_name'), table_name='clients')
    op.drop_index(op.f('ix_clients_license_uuid'), table_name='clients')
    op.drop_table('clients')
    op.drop_index(op.f('ix_accruals_invoice_id'), table_name='accruals')
    op.drop_table('accruals')
    op.drop_index(op.f('ix_users_surname'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_login'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_history_service_type'), table_name='history_service')
    op.drop_index(op.f('ix_history_service_text'), table_name='history_service')
    op.drop_index(op.f('ix_history_service_area'), table_name='history_service')
    op.drop_table('history_service')
    # ### end Alembic commands ###
